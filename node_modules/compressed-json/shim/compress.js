/**
 * @memberof module:compressed-json
 * @function compress
 * @param {Object} data
 * @param {Object} [options={}] - Optional settings
 */
'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

import stringConverter from './converters/stringConverter';
/** @lends module:compressed-json.compress */


function compress(src) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _options$reservedKeys = options.reservedKeys,
      reservedKeys = _options$reservedKeys === void 0 ? [] : _options$reservedKeys,
      _options$reservedValu = options.reservedValues,
      reservedValues = _options$reservedValu === void 0 ? [] : _options$reservedValu;
  var MIN_SHARE_STRING_LENGTH = 4;
  var MAX_SHARE_STRING_LENGTH = 512;
  var keysDict = {};
  var knownValuesDict = {};
  var pointers = [];
  var keys = [];
  var wrappers = {};

  var shortKeyFor = function shortKeyFor(key) {
    if (key in keysDict) {
      return keysDict[key];
    }

    var keyIndex = keys.length;
    var shortKey = keyIndex.toString(36);
    keysDict[key] = shortKey;
    keys.push(key);
    return shortKey;
  };

  reservedKeys.forEach(function (reservedKey) {
    return shortKeyFor(reservedKey);
  });

  var stringValueFor = function stringValueFor(value, keyPath) {
    var canBeShared = MIN_SHARE_STRING_LENGTH <= value.length && value.length <= MAX_SHARE_STRING_LENGTH;

    if (canBeShared) {
      if (value in knownValuesDict) {
        if (knownValuesDict[value].shared) {
          return knownValuesDict[value].pointer;
        }

        var index = pointers.length;
        pointers.push(value);
        var pointer = stringConverter.toPointer(index);
        knownValuesDict[value].pointer = pointer;
        knownValuesDict[value].shared = true;
        return pointer;
      }
    }

    knownValuesDict[value] = {
      keyPath: keyPath,
      shared: false,
      pointer: null
    };
    return stringConverter.toEscaped(value);
  };

  reservedValues.forEach(function (reservedValue) {
    return stringValueFor(reservedValue);
  });

  var convert = function convert(values) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$keyPath = _ref.keyPath,
        keyPath = _ref$keyPath === void 0 ? '' : _ref$keyPath;

    if (Array.isArray(values)) {
      var arr = values.map(function (v, i) {
        return convert(v, {
          keyPath: [keyPath, i].join('/')
        });
      });
      wrappers[keyPath] = arr;
      return arr;
    }

    if (values === null) {
      return null;
    }

    var type = _typeof(values);

    switch (type) {
      case 'function':
        return null;

      case 'object':
        {
          if (values instanceof Date) {
            return values.toJSON();
          }

          var compressed = {};

          var _keys = Object.keys(values);

          for (var _i = 0, _keys2 = _keys; _i < _keys2.length; _i++) {
            var key = _keys2[_i];
            var value = values[key];
            var shortKey = shortKeyFor(key);
            compressed[shortKey] = convert(value, {
              keyPath: [keyPath, shortKey].join('/')
            });
          }

          wrappers[keyPath] = compressed;
          return compressed;
        }

      case 'string':
        return stringValueFor(values, keyPath);

      default:
        return values;
    }
  };

  var converted = convert(src);

  for (var _i2 = 0, _Object$values = Object.values(knownValuesDict); _i2 < _Object$values.length; _i2++) {
    var _Object$values$_i = _Object$values[_i2],
        pointer = _Object$values$_i.pointer,
        shared = _Object$values$_i.shared,
        keyPath = _Object$values$_i.keyPath;

    if (shared && keyPath) {
      var _keys3 = keyPath.split('/');

      var lastKey = _keys3.pop();

      var wrapper = wrappers[_keys3.join('/')];

      wrapper[lastKey] = pointer;
    }
  }

  var K = keys.slice(reservedKeys.length);
  var P = pointers.slice(reservedValues.length);
  return _objectSpread({}, K.length > 0 ? {
    K: K
  } : {}, {}, P.length > 0 ? {
    P: P
  } : {}, {
    _: converted
  });
}

compress.toString = function compressToString(data) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var compressed = compress(data, options);
  return JSON.stringify(compressed);
};

export default compress;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,